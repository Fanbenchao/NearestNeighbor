class NearestNeighbor:
  def __init__(self):
    pass
  def train(self,X,y):
    self.Xtr = X
    self.ytr = y
  def predict(self,X):
    num_test = X.shape[0]
    Ypred = np.zeros(num_test,dtype = self.ytr.dtype)
    for i in range(num_test):
      distence = np.sum(np.abs(X-X[i,:]),axis = 1)
      num_index = np.argmin(distence)
      Ypred[i] = self.ytr[num_index]
    return Ypred
  #使用最近邻算法来区分图片种类，需要将所有的训练样本保存到计算机中，会占用大量的内存，
  #分析算法可以知道，训练的复杂度为O(1),而测试的复杂度为O(n),这也是他的不足。
  #上面的算法相当于取K = 1，自然在区分多个类别的时候准确率不高，我们可以选取最小的前K个类
  #来通过大多数原则决定是那一类，这样就能在一定程度上提高准确率。
  #就是所谓的K_Nearest算法。
  #在该算法中使用了L1 distence，L1的形状是一个矩形，自然也可以用L2 distence，L2的形状是一个圆形
  #根据需要使用
  #
